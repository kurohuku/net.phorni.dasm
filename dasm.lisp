;;;; dasm.lisp

(cl:in-package :dasm)

(cffi:defctype dword :uint32)

;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 1.3.40
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


(cl:defconstant LIBDASM-VERSION #x01050000)

(cl:defconstant GET-VERSION-MAJOR (cl:ash (cl:logand LIBDASM-VERSION #xff000000) -24))

(cl:defconstant GET-VERSION-MINOR1 (cl:ash (cl:logand LIBDASM-VERSION #x00ff0000) -16))

(cl:defconstant GET_VERSION-MINOR2 (cl:ash (cl:logand LIBDASM-VERSION #x0000ff00) -8))

(cl:defconstant GET_VERSION-MINOR3 (cl:logand LIBDASM-VERSION #x000000ff))

(cl:defconstant REGISTER-EAX 0)

(cl:defconstant REGISTER-ECX 1)

(cl:defconstant REGISTER-EDX 2)

(cl:defconstant REGISTER-EBX 3)

(cl:defconstant REGISTER-ESP 4)

(cl:defconstant REGISTER-EBP 5)

(cl:defconstant REGISTER-ESI 6)

(cl:defconstant REGISTER-EDI 7)

(cl:defconstant REGISTER-NOP 8)

(cl:defconstant REG-EAX 0)

(cl:defconstant REG-AX 0)

(cl:defconstant REG-AL 0)

(cl:defconstant REG-ES 0)

(cl:defconstant REG-ST0 0)

(cl:defconstant REG-ECX 1)

(cl:defconstant REG-CX 1)

(cl:defconstant REG-CL 1)

(cl:defconstant REG-CS 1)

(cl:defconstant REG-ST1 1)

(cl:defconstant REG-EDX 2)

(cl:defconstant REG-DX 2)

(cl:defconstant REG-DL 2)

(cl:defconstant REG-SS 2)

(cl:defconstant REG-ST2 2)

(cl:defconstant REG-EBX 3)

(cl:defconstant REG-BX 3)

(cl:defconstant REG-BL 3)

(cl:defconstant REG-DS 3)

(cl:defconstant REG-ST3 3)

(cl:defconstant REG-ESP 4)

(cl:defconstant REG-SP 4)

(cl:defconstant REG-AH 4)

(cl:defconstant REG-FS 4)

(cl:defconstant REG-ST4 4)

(cl:defconstant REG-EBP 5)

(cl:defconstant REG-BP 5)

(cl:defconstant REG-CH 5)

(cl:defconstant REG-GS 5)

(cl:defconstant REG-ST5 5)

(cl:defconstant REG-ESI 6)

(cl:defconstant REG-SI 6)

(cl:defconstant REG-DH 6)

(cl:defconstant REG-ST6 6)

(cl:defconstant REG-EDI 7)

(cl:defconstant REG-DI 7)

(cl:defconstant REG-BH 7)

(cl:defconstant REG-ST7 7)

(cl:defconstant REG-NOP 8)

(cl:defconstant IOP-EAX 1)

(cl:defconstant IOP-ECX (cl:ash 1 REG-ECX))

(cl:defconstant IOP-EDX (cl:ash 1 REG-EDX))

(cl:defconstant IOP-EBX (cl:ash 1 REG-EBX))

(cl:defconstant IOP-ESP (cl:ash 1 REG-ESP))

(cl:defconstant IOP-EBP (cl:ash 1 REG-EBP))

(cl:defconstant IOP-ESI (cl:ash 1 REG-ESI))

(cl:defconstant IOP-EDI (cl:ash 1 REG-EDI))

(cl:defconstant IOP-ALL (cl:logior IOP-EAX IOP-ECX IOP-EDX IOP-ESP IOP-EBP IOP-ESI IOP-EDI))

(cl:defconstant REGISTER-TYPE-GEN 1)

(cl:defconstant REGISTER-TYPE-SEGMENT 2)

(cl:defconstant REGISTER-TYPE-DEBUG 3)

(cl:defconstant REGISTER-TYPE-CONTROL 4)

(cl:defconstant REGISTER-TYPE-TEST 5)

(cl:defconstant REGISTER-TYPE-XMM 6)

(cl:defconstant REGISTER-TYPE-MMX 7)

(cl:defconstant REGISTER-TYPE-FPU 8)

(cffi:defcenum Mode
	:MODE-32
	:MODE-16)

(cffi:defcenum Format
	:FORMAT-ATT
	:FORMAT-INTEL)

(cl:defconstant EFL-CF (cl:ash 1 0))

(cl:defconstant EFL-PF (cl:ash 1 2))

(cl:defconstant EFL-AF (cl:ash 1 4))

(cl:defconstant EFL-ZF (cl:ash 1 6))

(cl:defconstant EFL-SF (cl:ash 1 7))

(cl:defconstant EFL-TF (cl:ash 1 8))

(cl:defconstant EFL-IF (cl:ash 1 9))

(cl:defconstant EFL-DF (cl:ash 1 10))

(cl:defconstant EFL-OF (cl:ash 1 11))

(cl:defconstant EFL-MATH (cl:logior EFL-OF EFL-SF EFL-ZF EFL-AF EFL-PF EFL-CF))

(cl:defconstant EFL-BITWISE (cl:logior EFL-OF EFL-CF EFL-SF EFL-ZF EFL-PF))

(cl:defconstant EFL-ALL-COMMON (cl:logior EFL-CF EFL-OF EFL-SF EFL-ZF EFL-AF EFL-PF))

(cffi:defcenum Instruction
	:INSTRUCTION-TYPE-ASC
	:INSTRUCTION-TYPE-DCL
	:INSTRUCTION-TYPE-MOV
	:INSTRUCTION-TYPE-MOVSR
	:INSTRUCTION-TYPE-ADD
	:INSTRUCTION-TYPE-XADD
	:INSTRUCTION-TYPE-ADC
	:INSTRUCTION-TYPE-SUB
	:INSTRUCTION-TYPE-SBB
	:INSTRUCTION-TYPE-INC
	:INSTRUCTION-TYPE-DEC
	:INSTRUCTION-TYPE-DIV
	:INSTRUCTION-TYPE-IDIV
	:INSTRUCTION-TYPE-NOT
	:INSTRUCTION-TYPE-NEG
	:INSTRUCTION-TYPE-STOS
	:INSTRUCTION-TYPE-LODS
	:INSTRUCTION-TYPE-SCAS
	:INSTRUCTION-TYPE-MOVS
	:INSTRUCTION-TYPE-MOVSX
	:INSTRUCTION-TYPE-MOVZX
	:INSTRUCTION-TYPE-CMPS
	:INSTRUCTION-TYPE-SHX
	:INSTRUCTION-TYPE-ROX
	:INSTRUCTION-TYPE-MUL
	:INSTRUCTION-TYPE-IMUL
	:INSTRUCTION-TYPE-EIMUL
	:INSTRUCTION-TYPE-XOR
	:INSTRUCTION-TYPE-LEA
	:INSTRUCTION-TYPE-XCHG
	:INSTRUCTION-TYPE-CMP
	:INSTRUCTION-TYPE-TEST
	:INSTRUCTION-TYPE-PUSH
	:INSTRUCTION-TYPE-AND
	:INSTRUCTION-TYPE-OR
	:INSTRUCTION-TYPE-POP
	:INSTRUCTION-TYPE-JMP
	:INSTRUCTION-TYPE-JMPC
	:INSTRUCTION-TYPE-JECXZ
	:INSTRUCTION-TYPE-SETC
	:INSTRUCTION-TYPE-MOVC
	:INSTRUCTION-TYPE-LOOP
	:INSTRUCTION-TYPE-CALL
	:INSTRUCTION-TYPE-RET
	:INSTRUCTION-TYPE-ENTER
	:INSTRUCTION-TYPE-INT
	:INSTRUCTION-TYPE-BT
	:INSTRUCTION-TYPE-BTS
	:INSTRUCTION-TYPE-BTR
	:INSTRUCTION-TYPE-BTC
	:INSTRUCTION-TYPE-BSF
	:INSTRUCTION-TYPE-BSR
	:INSTRUCTION-TYPE-BSWAP
	:INSTRUCTION-TYPE-SGDT
	:INSTRUCTION-TYPE-SIDT
	:INSTRUCTION-TYPE-SLDT
	:INSTRUCTION-TYPE-LFP
	:INSTRUCTION-TYPE-CLD
	:INSTRUCTION-TYPE-STD
	:INSTRUCTION-TYPE-XLAT
	:INSTRUCTION-TYPE-FCMOVC
	:INSTRUCTION-TYPE-FADD
	:INSTRUCTION-TYPE-FADDP
	:INSTRUCTION-TYPE-FIADD
	:INSTRUCTION-TYPE-FSUB
	:INSTRUCTION-TYPE-FSUBP
	:INSTRUCTION-TYPE-FISUB
	:INSTRUCTION-TYPE-FSUBR
	:INSTRUCTION-TYPE-FSUBRP
	:INSTRUCTION-TYPE-FISUBR
	:INSTRUCTION-TYPE-FMUL
	:INSTRUCTION-TYPE-FMULP
	:INSTRUCTION-TYPE-FIMUL
	:INSTRUCTION-TYPE-FDIV
	:INSTRUCTION-TYPE-FDIVP
	:INSTRUCTION-TYPE-FDIVR
	:INSTRUCTION-TYPE-FDIVRP
	:INSTRUCTION-TYPE-FIDIV
	:INSTRUCTION-TYPE-FIDIVR
	:INSTRUCTION-TYPE-FCOM
	:INSTRUCTION-TYPE-FCOMP
	:INSTRUCTION-TYPE-FCOMPP
	:INSTRUCTION-TYPE-FCOMI
	:INSTRUCTION-TYPE-FCOMIP
	:INSTRUCTION-TYPE-FUCOM
	:INSTRUCTION-TYPE-FUCOMP
	:INSTRUCTION-TYPE-FUCOMPP
	:INSTRUCTION-TYPE-FUCOMI
	:INSTRUCTION-TYPE-FUCOMIP
	:INSTRUCTION-TYPE-FST
	:INSTRUCTION-TYPE-FSTP
	:INSTRUCTION-TYPE-FIST
	:INSTRUCTION-TYPE-FISTP
	:INSTRUCTION-TYPE-FISTTP
	:INSTRUCTION-TYPE-FLD
	:INSTRUCTION-TYPE-FILD
	:INSTRUCTION-TYPE-FICOM
	:INSTRUCTION-TYPE-FICOMP
	:INSTRUCTION-TYPE-FFREE
	:INSTRUCTION-TYPE-FFREEP
	:INSTRUCTION-TYPE-FXCH
	:INSTRUCTION-TYPE-SYSENTER
	:INSTRUCTION-TYPE-FPU-CTRL
	:INSTRUCTION-TYPE-FPU
	:INSTRUCTION-TYPE-MMX
	:INSTRUCTION-TYPE-SSE
	:INSTRUCTION-TYPE-OTHER
	:INSTRUCTION-TYPE-PRIV)

(cffi:defcenum Operand
	:OPERAND-TYPE-NONE
	:OPERAND-TYPE-MEMORY
	:OPERAND-TYPE-REGISTER
	:OPERAND-TYPE-IMMEDIATE)

(cffi:defcstruct INST
	(type :pointer)
	(mnemonic :string)
	(flags1 :int)
	(flags2 :int)
	(flags3 :int)
	(modrm :int)
	(eflags-affected :short)
	(eflags-used :short)
	(iop-written :int)
	(iop-read :int))

(cffi:defcstruct OPERAND
	(type Operand)
	(reg :int)
	(basereg :int)
	(indexreg :int)
	(scale :int)
	(dispbytes :int)
	(dispoffset :int)
	(immbytes :int)
	(immoffset :int)
	(sectionbytes :int)
	(section :pointer)
	(displacement :pointer)
	(immediate :pointer)
	(flags :int))

(cffi:defcstruct INSTRUCTION
	(length :int)
	(type Instruction)
	(mode Mode)
	(opcode :pointer)
	(modrm :pointer)
	(sib :pointer)
	(modrm-offset :int)
	(extindex :int)
	(fpuindex :int)
	(dispbytes :int)
	(immbytes :int)
	(sectionbytes :int)
	(op1 OPERAND)
	(op2 OPERAND)
	(op3 OPERAND)
	(ptr :pointer)
	(flags :int)
	(eflags-affected :short)
	(eflags-used :short)
	(iop-written :int)
	(iop-read :int))

(cffi:defcfun ("get_instruction" get-instruction) :int
  (inst :pointer)
  (addr :pointer)
  (mode Mode))

(cffi:defcfun ("get_instruction_string" get-instruction-string) :int
  (inst :pointer)
  (format Format)
  (offset dword)
  (string :string)
  (length :int))

(cffi:defcfun ("get_mnemonic_string" get-mnemonic-string) :int
  (inst :pointer)
  (format Format)
  (string :string)
  (length :int))

(cffi:defcfun ("get_operand_string" get-operand-string) :int
  (inst :pointer)
  (op :pointer)
  (format Format)
  (offset dword)
  (string :string)
  (length :int))

(cffi:defcfun ("get_register_type" get-register-type) :int
  (op :pointer))

(cffi:defcfun ("get_operand_type" get-operand-type) :int
  (op :pointer))

(cffi:defcfun ("get_operand_register" get-operand-register) :int
  (op :pointer))

(cffi:defcfun ("get_operand_basereg" get-operand-basereg) :int
  (op :pointer))

(cffi:defcfun ("get_operand_indexreg" get-operand-indexreg) :int
  (op :pointer))

(cffi:defcfun ("get_operand_scale" get-operand-scale) :int
  (op :pointer))

(cffi:defcfun ("get_operand_immediate" get-operand-immediate) :int
  (op :pointer)
  (imm :pointer))

(cffi:defcfun ("get_operand_displacement" get-operand-displacement) :int
  (op :pointer)
  (disp :pointer))

(cffi:defcfun ("get_source_operand" get-source-operand) :pointer
  (inst :pointer))

(cffi:defcfun ("get_destination_operand" get-destination-operand) :pointer
  (inst :pointer))

(cl:defconstant PREFIX-LOCK #x01000000)

(cl:defconstant PREFIX-REPNE #x02000000)

(cl:defconstant PREFIX-REP #x03000000)

(cl:defconstant PREFIX-REPE #x03000000)

(cl:defconstant PREFIX-ES-OVERRIDE #x00010000)

(cl:defconstant PREFIX-CS-OVERRIDE #x00020000)

(cl:defconstant PREFIX-SS-OVERRIDE #x00030000)

(cl:defconstant PREFIX-DS-OVERRIDE #x00040000)

(cl:defconstant PREFIX-FS-OVERRIDE #x00050000)

(cl:defconstant PREFIX-GS-OVERRIDE #x00060000)

(cl:defconstant PREFIX-OPERAND-SIZE-OVERRIDE #x00000100)

(cl:defconstant PREFIX-ADDR-SIZE-OVERRIDE #x00001000)

(cl:defconstant EXT-G1-1 #x00000001)

(cl:defconstant EXT-G1-2 #x00000002)

(cl:defconstant EXT-G1-3 #x00000003)

(cl:defconstant EXT-G2-1 #x00000004)

(cl:defconstant EXT-G2-2 #x00000005)

(cl:defconstant EXT-G2-3 #x00000006)

(cl:defconstant EXT-G2-4 #x00000007)

(cl:defconstant EXT-G2-5 #x00000008)

(cl:defconstant EXT-G2-6 #x00000009)

(cl:defconstant EXT-G3-1 #x0000000a)

(cl:defconstant EXT-G3-2 #x0000000b)

(cl:defconstant EXT-G4 #x0000000c)

(cl:defconstant EXT-G5 #x0000000d)

(cl:defconstant EXT-G6 #x0000000e)

(cl:defconstant EXT-G7 #x0000000f)

(cl:defconstant EXT-G8 #x00000010)

(cl:defconstant EXT-G9 #x00000011)

(cl:defconstant EXT-GA #x00000012)

(cl:defconstant EXT-GB #x00000013)

(cl:defconstant EXT-GC #x00000014)

(cl:defconstant EXT-GD #x00000015)

(cl:defconstant EXT-GE #x00000016)

(cl:defconstant EXT-GF #x00000017)

(cl:defconstant EXT-G0 #x00000018)

(cl:defconstant EXT-T2 #x00000020)

(cl:defconstant EXT-CP #x00000030)

(cl:defconstant TYPE-3 #x80000000)

(cl:defconstant FLAGS-NONE 0)

(cl:defconstant AM-A #x00010000)

(cl:defconstant AM-C #x00020000)

(cl:defconstant AM-D #x00030000)

(cl:defconstant AM-E #x00040000)

(cl:defconstant AM-G #x00050000)

(cl:defconstant AM-I #x00060000)

(cl:defconstant AM-J #x00070000)

(cl:defconstant AM-M #x00080000)

(cl:defconstant AM-O #x00090000)

(cl:defconstant AM-P #x000a0000)

(cl:defconstant AM-Q #x000b0000)

(cl:defconstant AM-R #x000c0000)

(cl:defconstant AM-S #x000d0000)

(cl:defconstant AM-T #x000e0000)

(cl:defconstant AM-V #x000f0000)

(cl:defconstant AM-W #x00100000)

(cl:defconstant AM-I1 #x00200000)

(cl:defconstant AM-REG #x00210000)

(cl:defconstant AM-IND #x00220000)

(cl:defconstant OT-a #x01000000)

(cl:defconstant OT-b #x02000000)

(cl:defconstant OT-c #x03000000)

(cl:defconstant OT-d #x04000000)

(cl:defconstant OT-q #x05000000)

(cl:defconstant OT-dq #x06000000)

(cl:defconstant OT-v #x07000000)

(cl:defconstant OT-w #x08000000)

(cl:defconstant OT-p #x09000000)

(cl:defconstant OT-pi #x0a000000)

(cl:defconstant OT-pd #x0b000000)

(cl:defconstant OT-ps #x0c000000)

(cl:defconstant OT-s #x0d000000)

(cl:defconstant OT-sd #x0e000000)

(cl:defconstant OT-ss #x0f000000)

(cl:defconstant OT-si #x10000000)

(cl:defconstant OT-t #x11000000)

(cl:defconstant P-r #x00004000)

(cl:defconstant P-w #x00002000)

(cl:defconstant P-x #x00001000)

(cl:defconstant F-s #x00000100)

(cl:defconstant F-r #x00000200)

(cl:defconstant F-f #x00000400)


;;
(defun test ()
  (cffi:with-foreign-objects
      ((buf :uint8 1)
       (inst 'INSTRUCTION)
       (str :char 256))
    (setf (cffi:mem-aref buf :uint8 0) #x90) ;; nop
    (let ((len (get-instruction inst buf :mode-32)))
      (format t "instruction length: ~A~%" len)
      (get-instruction-string inst :format-intel 0 str 256)
      (format t "instruction: ~A~%" (cffi:foreign-string-to-lisp str :max-chars 256)))))
    